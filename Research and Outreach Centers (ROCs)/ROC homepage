## Overview (text)

![GEMS Sensing](https://github.com/GEMS-sensing/Bgraphics/blob/main/roc_grafana_resize.png?raw=true)

# Welcome
**To get started**, view your data by clicking on a dashboard, 
 or directly click on the node you want to view below 

# Need Help?
Submit a help ticket https://gemsinformatics.freshdesk.com

# About GEMS Sensing
GEMS Sensing is a Service Organization of the [GEMS Informatics Center](https://gems.umn.edu)
in the University of Minnesota. Technologies are developed in the [Real-time GeoInformation Systems Lab](https://gems.umn.edu/runck-lab-real-time-geoinformation-systems)
and supported by the [Minnesota Supercomputing Institute](https://www.msi.umn.edu).

# Useful Links
[Weekly station inspections](https://docs.google.com/forms/d/e/1FAIpQLScpgslWeE62JmrKom6e5Bi1wZpgr5JqNGB6Q9M-CHqK8CeQww/viewform?usp=sf_link)

[eROC SOP](https://docs.google.com/document/d/1GLtO7-_-xo1Wb9ppBzPQzv-kMmPZDAMr0YO2V6cBo9Y/edit?usp=sharing)

## Map (geomap)

WITH gemsLoc as (
  SELECT
  -- DISTINCT published_at AS "time",
  -- message AS metric,
  distinct node_id,
  ROW_NUMBER() OVER(ORDER BY $node_GEMS ASC) AS RowNum,
  -- count(node_id) as index,
  -- ARRAY(SELECT json_object_keys(message::json)) AS keys,
  -- (message::json->'Diagnostic'->>'Time')::int AS val2,
  -- (message::json->'Diagnostic'->'Devices'->'Kestrel'->'ACCEL'->>2)::float AS Accel_Z,
  -- avg(((message::jsonb)->'Latitude')::float) as "Latitude", 
  -- avg(((message::jsonb)->'Longitude')::float) as "Longitude"
  -- max(string_to_array('${location_GEMS:raw}', ',')) AS "node"
  -- max(split_part(var, '|', 1)) as node_name,
  max(split_part(var, '|', 2)::numeric) as latitude,
  max(split_part(var, '|', 3)::numeric) as longitude
  -- (loc->>1)::float AS Long,
  -- (loc->>3)::float AS UpdateTime
  -- min(((message::json)->'Data'->'Loc'->>3)::float) AS time
  -- (elems1->>1)::float AS Long,
  -- (elems1->>3)::int AS UpdateTime
FROM raw_data, unnest(string_to_array('${location_GEMS:raw}', ',')) as var
WHERE
  $__timeFilter(published_at) AND node_id in ($node_GEMS) AND split_part(var, '|', 1) = node_id
  GROUP BY 1, $__timeFilter(published_at)
),
campbellLoc as (
  SELECT
  -- DISTINCT published_at AS "time",
  -- message AS metric,
  
  distinct node_id,
  ROW_NUMBER() OVER(ORDER BY $node ASC) AS RowNum,
  -- count(node_id) as index,
  -- ARRAY(SELECT json_object_keys(message::json)) AS keys,
  -- (message::json->'Diagnostic'->>'Time')::int AS val2,
  -- (message::json->'Diagnostic'->'Devices'->'Kestrel'->'ACCEL'->>2)::float AS Accel_Z,
  avg(((message::jsonb)->'Latitude')::float) as latitude, 
  avg(((message::jsonb)->'Longitude')::float) as longitude
  -- (loc->>1)::float AS Long,
  -- (loc->>3)::float AS UpdateTime
  -- min(((message::json)->'Data'->'Loc'->>3)::float) AS time
  -- (elems1->>1)::float AS Long,
  -- (elems1->>3)::int AS UpdateTime
FROM raw_data
WHERE
  $__timeFilter(published_at) AND node_id in ($node) AND event = 'json'
  GROUP BY 1, $__timeFilter(published_at)

)
  SELECT 
    -- distinct campbellLoc.index as "Campbell Node ID",
    -- row_number() as dummy,
    -- gemsLoc.node_id as "GEMS Node ID",
    gemsLoc.node_id as gemsid,
    campbellLoc.node_id as campbellid,
    CASE 
      WHEN gemsLoc.node_id is not null THEN gemsLoc.node_id
      WHEN campbellLoc.node_id is not null THEN campbellLoc.node_id
    END  
    as id,
    CASE 
      WHEN gemsLoc.node_id is not null THEN 'gems-met-stations-rocs'
      WHEN campbellLoc.node_id is not null THEN 'campbell-stations-rocs'
    END  
    as dashboard_name,
    
    CASE 
      WHEN gemsLoc.latitude is not null THEN gemsLoc.latitude
      WHEN campbellLoc.latitude is not null THEN campbellLoc.latitude
    END  
    as latitude,
    
    CASE 
      WHEN gemsLoc.longitude is not null THEN gemsLoc.longitude
      WHEN campbellLoc.longitude is not null THEN campbellLoc.longitude
    END  
    as longitude,
    
    
    
      
    -- campbellLoc.node_id as campbellid,
    -- gemsLoc.*,
    -- campbellLoc.*
    gemsLoc.latitude as "GEMS Lat",
    gemsLoc.longitude as "GEMS Long",
  -- FROM gemsLoc
  
  -- UNION 
  
  -- SELECT
    
    -- distinct node_id,
    -- CASE
    --   WHEN node_id in ($node_GEMS) THEN avg(gemsLoc.latitude) 
    --   ELSE null
    -- END
    -- as "GEMS Lat",
    -- CASE
    --   WHEN node_id in ($node_GEMS) THEN avg(gemsLoc.longitude) 
    --   ELSE null
    -- END
    -- as "GEMS Long"
    campbellLoc.latitude as "Campbell Lat",
    campbellLoc.longitude as "Campbell Long"
    

  FROM gemsLoc
  FULL OUTER JOIN campbellLoc ON gemsLoc.node_id = campbellLoc.node_id WHERE gemsLoc.node_id is NULL OR campbellLoc.node_id is NULL
  -- GROUP BY 1, 


  -- AND is_valid_json(message) 
  -- AND is_valid_time(message)
  -- AND (message::json->'Data'->'Loc'->>0) is not null AND (message::json->'Data'->'Loc'->>1) is not null
  -- AND loc->>0 is not null 
  -- AND loc->>1 is not null
-- GROUP BY 1, $__timeFilter(published_at)
-- ORDER BY 1

## Campbell nodes (table)

SELECT
  display_name
FROM $project_key1.raw
WHERE
  node_id IN ($node)
AND project = 'EROC MET Stations'
AND display_name NOT ilike 'MET5A_SPRF'
AND display_name NOT ilike 'eROC_MET6'
AND display_name NOT ilike 'eROC_MET7A'
AND display_name NOT ilike 'eROC_MET7B'
AND display_name NOT ilike 'eROC_MET9'  
Group by 1
ORDER BY display_name desc

## GEMS nodes (table)

SELECT
  display_name
FROM $project_key1.raw
WHERE
  node_id IN ($node)
AND project = 'eROC'
Group by 1
-- ORDER BY LEFT (display_name,3) asc
ORDER BY SUBSTRING(display_name,4) asc